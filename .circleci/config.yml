version: 2
jobs:
  build:
    working_directory: ~/coala-bears

    docker:
      - image: circleci/jdk8:0.1.1

    parallelism: 2

    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{checksum "requirements.txt"}}
      - run:
          name: dependencies
          command:  |
                    sudo apt-get update
                    sudo apt-get install -y python3.4-venv curl git
      - run:
          name: virtual-env
          command: |
                    if [ ! -d "$HOME/.venv" ]; then
                      python3 -m venv ~/.venv 
                    fi
                    echo "source $HOME/.venv/bin/activate" >> $BASH_ENV
      - run:
          name: pre
          command: |
                    sudo rm -rf /var/cache/apt/archives
                    sudo ln -s $HOME/.apt-cache /var/cache/apt/archives
                    mkdir -p $HOME/.apt-cache/partial
                    mkdir -p $HOME/.RLibrary
                    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
                    export "NVM_DIR=$HOME/.nvm"
                    echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
                    echo 'export CIRCLE_BUILD_IMAGE=ubuntu-14.04' >> $BASH_ENV
                    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                    echo 'export PATH=/opt/cabal/1.24/bin:$PATH' >> $BASH_ENV
                    echo 'export PATH=$HOME/coala-bears/node_modules/.bin:$PATH' >> $BASH_ENV
                    echo 'export PATH=$HOME/coala-bears/vendor/bin:$PATH' >> $BASH_ENV
                    echo 'export LINTR_COMMENT_BOT=false:$PATH' >> $BASH_ENV
                    echo 'export PATH=$HOME/dart-sdk/bin:$PATH' >> $BASH_ENV
                    echo 'export PATH=$HOME/.cabal/bin:$PATH' >> $BASH_ENV
                    echo 'export PATH=$HOME/infer-linux64-v0.7.0/infer/bin:$PATH' >> $BASH_ENV
                    echo 'export PATH=$HOME/pmd-bin-5.4.1/bin:$PATH' >> $BASH_ENV
                    echo 'export PATH=$HOME/bakalint-0.4.0:$PATH' >> $BASH_ENV
                    echo 'export PATH=$HOME/elm-format-0.18:$PATH' >> $BASH_ENV
                    echo 'export PATH=$HOME/.local/tailor/tailor-latest/bin:$PATH' >> $BASH_ENV
                    echo 'export PATH=$HOME/phpmd:$PATH' >> $BASH_ENV
                    echo 'export R_LIB_USER=$HOME/.RLibrary:$PATH' >> $BASH_ENV
                    nvm install 6.10.2
                    nvm alias default node
                    echo "source $HOME/.venv/bin/activate" >> $BASH_ENV
                    echo "source $NVM_DIR/nvm.sh" >> $BASH_ENV
      - run:
          name: AptDependencies
          command:  bash .ci/deps.apt.sh
      - run:
         name: DependenciesPip
         command:   |
                    apt-get install libssl-dev libxml2 -y
                    sudo apt-get install python3-dev libxml2-dev libxslt1-dev zlib1g-dev -y
                    git clone https://github.com/pyenv/pyenv.git /tmp/pyenv
                    if [ ! -d "$HOME/.pyenv" ]; then mkdir -p ~/.pyenv ; fi
                    cp -R /tmp/pyenv/* ~/.pyenv
                    export PYENV_ROOT="$HOME/.pyenv"
                    export PATH="$PYENV_ROOT/bin:$PATH"
                    eval "$(pyenv init -)"
                    bash .ci/deps.pip.sh
      - run:
         name: JavaDependencies
         command: bash .ci/deps.java.sh
      - run:
         name: OpamDependencies
         command:   bash .ci/deps.opam.sh
      - run:
         name: RDependencies
         command:   bash .ci/deps.r.sh
      - run:
         name: CabalDependencies
         command:  bash .ci/deps.cabal.sh
      - run:
          name: GeneralDependencies
          command: bash .ci/deps.sh
      - run:
         name: CoalaDependencies
         command:   bash .ci/deps.coala-bears.sh
      - run:
          name: Codecov
          when: always
          command: codecov
      - run:
          name: Coalaci
          when: always
          command: coala-ci -L DEBUG
      - run:
          name: Setup
          when: always
          command: python setup.py bdist_wheel
      - run:
          name: AllDependencies
          when: always
          command: |
                      export NVM_DIR="$HOME/.nvm"
                      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
                      pip install $(ls ./dist/*.whl)"[alldeps]"
      - run:
          name: Documents
          when: always
          command: |
                      echo $CIRCLE_NODE_INDEX
                      if [ $CIRCLE_NODE_INDEX == 1 ] ; then
                      pip install -r docs-requirements.txt
                      fi
      - run:
          name: SetupDocs
          when: always
          command: |
                      echo $CIRCLE_NODE_INDEX
                      if [ $CIRCLE_NODE_INDEX == 1 ] ; then
                        python setup.py docs
                      fi
      - save_cache:
          key: dependency-cache-{{ checksum "requirements.txt" }}
          paths:
            - "docs/_build"
            - "$HOME/.pyenv/versions/3.4.3"
            - "$HOME/.pyenv/versions/3.5.1"
            - "$HOME/coala-bears/node_modules"
            - "$HOME/coala-bears/.bundle"
            - "$HOME/coala-bears/vendor"
            - "$HOME/.RLibrary"
            - "$HOME/dart-sdk/bin"
            - "$HOME/.cabal"
            - "$HOME/.ghc"
            - "$HOME/.ghc-mod"
            - "$HOME/infer-linux64-v0.7.0"
            - "$HOME/nltk_data"
            - "$HOME/pmd-bin-5.4.1"
            - "$HOME/.local/share/coala-bears"
            - "$HOME/bakalint-0.4.0"
            - "$HOME/.julia"
            - "$HOME/.local/tailor/"
            - "$HOME/.venv"
      - run:
          name: Tests
          when: always
          command: bash .ci/tests.sh
